public class SpringDesignPattern {
    /*
    动态代理：生层代理对象，控制对真实对象的访问。作用：控制是否能访问到真实对象，在访问真实对象之前或者之后加入一定逻辑
    建立代理对象与真实对象的代理关系，代理对象的代理逻辑
    JDK动态代理（需要借助真实对象的接口）CGLIB（不需要接口）

    拦截器：before（代理对象，真实对象，方法对象，参数），true调用真实对象的方法,false到around()
            around（）；
            after（）,在调用真实对象方法或者around()方法之后执行

    责任链模式：一个对象在拦截器链上的多个拦截器拦截处理。
            多拦截器：先从后向前依次调用拦截器的before()方法，在从前往后调用拦截器的after()方法
            好处：可以在拦截器链上添加新的拦截业务
     */
}
